//Определение переменных
ПустойИдентификатор = "00000000-0000-0000-0000-000000000000";
ЗадержкаБлокировки = $ЗадержкаБлокировки;
ЗадержкаЗапросаДанных = $ЗадержкаЗапросаДанных;

//АлгоритмФормированияЗапросаДанных = сшпКэшируемыеФункции.ПолучитьОбработчик("ФормированиеЗапросаДанных", Перечисления.сшпТипыИнтеграции.Исходящая, ).ПроцедураОбработки;

//Получение тела сообщения
xdtoОбъект = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, ОбъектСообщение.Body);

НачатьТранзакцию();
Попытка
	
	ЗначениеДляПоиска = Новый УникальныйИдентификатор(xdtoОбъект.Ссылка);
	СсылкаНаЭлемент = Документы.ПриходТовара.ПолучитьСсылку(ЗначениеДляПоиска);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ПриходТовара");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаЭлемент);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОтменитьТранзакцию();
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
		Задержка = ЗадержкаБлокировки;
		ЗаписьЖурналаРегистрации(
		"Datareon. Обработка сообщения", УровеньЖурналаРегистрации.Предупреждение,, 
		Идентификатор, "Ожидание установки блокировки на ключ " + xdtoОбъект.Ссылка
		);
		Перейти ~Выход;
	КонецПопытки;	
	
	//Поиск объекта
	
	новыйОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
	Если новыйОбъект = Неопределено тогда
		новыйОбъект = Документы.ПриходТовара.СоздатьДокумент();
		новыйОбъект.УстановитьСсылкуНового(СсылкаНаЭлемент);
	КонецЕсли;
	
	//Запрос данных - создаём список
	НенайденныеОбъектыМассив = Новый Массив;
	НенайденныеОбъектыРежим = "Заполнение";	//Создание списка ненайденных объектов

	////////////////////////////////////////////////////////////////////////////////
	//Реквизиты шапки
	
	//Дата
	новыйОбъект.Дата = ?(ЗначениеЗаполнено(xdtoОбъект.Получить("Дата")), XMLЗначение(Тип("Дата"), xdtoОбъект.Получить("Дата")), Дата(1,1,1));
	
	//Поставщик
	Значение = xdtoОбъект.Получить("Поставщик");
	Если Значение <> ПустойИдентификатор И ЗначениеЗаполнено(Значение) Тогда
		новыйОбъект.Поставщик = Справочники.Контрагенты.ПолучитьСсылку(новый УникальныйИдентификатор(Значение));
		//Запрос данных - заполняем список
		СсылкаДляПоиска = новыйОбъект.Поставщик;	//Ссылка для проверки наличия объекта в базе
		ТипДанныхДляПоиска = "Контрагент";			//Строка тип нененайденного объекта
// Выполнить АлгоритмФормированияЗапросаДанных;
Результат = ВыполнитьФункцию("Заполнение", СсылкаДляПоиска, ТипДанныхДляПоиска, НенайденныеОбъектыМассив, Значение);
	Иначе
		новыйОбъект.Поставщик = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	//Склад
	Значение = xdtoОбъект.Получить("Склад");
	Если Значение <> ПустойИдентификатор И ЗначениеЗаполнено(Значение) Тогда
		новыйОбъект.Склад = Справочники.Склады.ПолучитьСсылку(новый УникальныйИдентификатор(Значение));
		//Запрос данных - заполняем список
		СсылкаДляПоиска = новыйОбъект.Склад;	//Ссылка для проверки наличия объекта в базе
		ТипДанныхДляПоиска = "Склад";			//Строка тип нененайденного объекта
// Выполнить АлгоритмФормированияЗапросаДанных;
Результат = ВыполнитьФункцию("Заполнение", СсылкаДляПоиска, ТипДанныхДляПоиска, НенайденныеОбъектыМассив, Значение);
	Иначе
		новыйОбъект.Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	//Организация
	Значение = xdtoОбъект.Получить("Организация");
	Если Значение <> ПустойИдентификатор И ЗначениеЗаполнено(Значение) Тогда
		новыйОбъект.Организация = Справочники.Организации.ПолучитьСсылку(новый УникальныйИдентификатор(Значение));
		//Запрос данных - заполняем список
		СсылкаДляПоиска = новыйОбъект.Организация;	//Ссылка для проверки наличия объекта в базе
		ТипДанныхДляПоиска = "Организация";			//Строка тип нененайденного объекта
// Выполнить АлгоритмФормированияЗапросаДанных;
Результат = ВыполнитьФункцию("Заполнение", СсылкаДляПоиска, ТипДанныхДляПоиска, НенайденныеОбъектыМассив, Значение);
	Иначе
		новыйОбъект.Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	//Валюта
	Значение = xdtoОбъект.Получить("Валюта");
	Если Значение <> ПустойИдентификатор И ЗначениеЗаполнено(Значение) Тогда
		новыйОбъект.Валюта = Справочники.Валюты.ПолучитьСсылку(новый УникальныйИдентификатор(Значение));
		//Запрос данных - заполняем список
		СсылкаДляПоиска = новыйОбъект.Валюта;	//Ссылка для проверки наличия объекта в базе
		ТипДанныхДляПоиска = "Валюта";			//Строка тип нененайденного объекта
// Выполнить АлгоритмФормированияЗапросаДанных;
Результат = ВыполнитьФункцию("Заполнение", СсылкаДляПоиска, ТипДанныхДляПоиска, НенайденныеОбъектыМассив, Значение);
	Иначе
		новыйОбъект.Валюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	//Табличные части
	
	
	//Табличная часть Товары
	новыйОбъект.Товары.Очистить();
	текТаблица = xdtoОбъект.Товары.Последовательность();
	Для Инд = 0 По текТаблица.Количество()-1 Цикл
		xdtoСтрока= текТаблица.ПолучитьЗначение(Инд);
		текСтрока = новыйОбъект.Товары.Добавить();
		
		//Товар
		Значение = xdtoСтрока.Получить("Товар");
		Если Значение <> ПустойИдентификатор И ЗначениеЗаполнено(Значение) Тогда
			текСтрока.Товар = Справочники.Товары.ПолучитьСсылку(новый УникальныйИдентификатор(Значение));
			//Запрос данных - заполняем список
			СсылкаДляПоиска = текСтрока.Товар;		//Ссылка для проверки наличия объекта в базе
			ТипДанныхДляПоиска = "Товар";			//Строка тип нененайденного объекта
// Выполнить АлгоритмФормированияЗапросаДанных;
Результат = ВыполнитьФункцию("Заполнение", СсылкаДляПоиска, ТипДанныхДляПоиска, НенайденныеОбъектыМассив, Значение);
		Иначе
			текСтрока.Товар = Справочники.Товары.ПустаяСсылка();
		КонецЕсли;
		
		//Цена
		текСтрока.Цена = xdtoСтрока.Получить("Цена");
		
		//Количество
		текСтрока.Количество = xdtoСтрока.Получить("Количество");
		
		//Сумма
		текСтрока.Сумма = xdtoСтрока.Получить("Сумма");
	КонецЦикла;
	
	//Запрос данных - обработка
// НенайденныеОбъектыРежим = "Отправка";		//Формирование пакета с запросом данных
// Выполнить АлгоритмФормированияЗапросаДанных;
Результат = ВыполнитьФункцию("Отправка", НенайденныеОбъектыМассив, ЗадержкаЗапросаДанных, СостояниеСообщения, Задержка, ФорматСообщения, Идентификатор);

	
	//Запись объекта
	новыйОбъект.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	новыйОбъект.ОбменДанными.Загрузка = Истина;
	новыйОбъект.Записать();
	
	ЗафиксироватьТранзакцию();	
Исключение
	Пока ТранзакцияАктивна() Цикл
		ОтменитьТранзакцию();
	КонецЦикла;
	ВызватьИсключение;
КонецПопытки;
